---
import ProjectItem from "../ProjectItem.astro";
import type { Props as ProjectItemProps } from "../ProjectItem.astro";

export interface Props {
    title?: string;
    titleKey?: string;
    projects: ProjectItemProps[];
}

const { title = "Repositorios de GitHub", titleKey, projects } = Astro.props;
---

<div class="panel-projects">
    <header class="panel-projects__header">
        <h3 class="panel-projects__title" data-i18n-key={titleKey}>{title}</h3>
    </header>
    <div class="panel-projects__pagination" id="pagination-ctn" data-total-projects={projects.length}>
        <button
            class="panel-projects__nav-btn panel-projects__nav-btn--prev"
            aria-label="Previous page"
        >
            <svg
                width="20"
                height="20"
                viewBox="0 0 20 20"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
            >
                <path
                    d="M12.5 15L7.5 10L12.5 5"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"></path>
            </svg>
        </button>
        <div class="panel-projects__container">
            <div class="panel-projects__grid" id="projects-grid">
                {projects.map((project) => <ProjectItem {...project} />)}
            </div>
        </div>
        <button class="panel-projects__nav-btn panel-projects__nav-btn--next" aria-label="Next page">
            <svg
                width="20"
                height="20"
                viewBox="0 0 20 20"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
            >
                <path
                    d="M7.5 15L12.5 10L7.5 5"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"></path>
            </svg>
        </button>
    </div>
</div>

<script>
    // Configuración responsive de items por página y layout
    const LAYOUT_CONFIG = {
        mobile: { items: 4, cols: 1, rows: 4 },      // < 640px: 1 col x 4 filas
        tablet: { items: 4, cols: 2, rows: 2 },      // 640px - 900px: 2 cols x 2 filas
        tabletLarge: { items: 6, cols: 3, rows: 2 }, // 900px - 1200px: 3 cols x 2 filas
        desktop: { items: 8, cols: 4, rows: 2 },     // >= 1200px: 4 cols x 2 filas
    };

    class ProjectsPagination {
        private currentPage = 0;
        private itemsPerPage = LAYOUT_CONFIG.desktop.items;
        private totalProjects = 0;
        private projectItems: HTMLElement[] = [];
        private prevBtn: HTMLButtonElement | null = null;
        private nextBtn: HTMLButtonElement | null = null;
        private container: HTMLElement | null = null;
        private grid: HTMLElement | null = null;

        constructor() {
            this.init();
        }

        private init() {
            this.container = document.getElementById("pagination-ctn");
            if (!this.container) return;

            this.totalProjects = parseInt(
                this.container.dataset.totalProjects || "0",
                10,
            );
            this.prevBtn = this.container.querySelector(".panel-projects__nav-btn--prev");
            this.nextBtn = this.container.querySelector(".panel-projects__nav-btn--next");

            this.grid = document.getElementById("projects-grid");
            if (this.grid) {
                this.projectItems = Array.from(this.grid.children) as HTMLElement[];
            }

            this.updateLayout();
            this.attachEventListeners();
            this.updateView();

            // Escuchar cambios de tamaño de ventana con debounce
            let resizeTimer: ReturnType<typeof setTimeout>;
            window.addEventListener("resize", () => {
                clearTimeout(resizeTimer);
                resizeTimer = setTimeout(() => {
                    this.updateLayout();
                    this.updateView();
                }, 100);
            });
        }

        private updateLayout() {
            const width = window.innerWidth;
            let config;

            if (width < 640) {
                config = LAYOUT_CONFIG.mobile;
            } else if (width < 900) {
                config = LAYOUT_CONFIG.tablet;
            } else if (width < 1200) {
                config = LAYOUT_CONFIG.tabletLarge;
            } else {
                config = LAYOUT_CONFIG.desktop;
            }

            this.itemsPerPage = config.items;

            // Actualizar grid layout
            if (this.grid) {
                this.grid.style.gridTemplateColumns = `repeat(${config.cols}, 1fr)`;
                this.grid.style.gridTemplateRows = `repeat(${config.rows}, 1fr)`;
            }

            // Ajustar página actual si es necesario
            const maxPage = Math.ceil(this.totalProjects / this.itemsPerPage) - 1;
            if (this.currentPage > maxPage) {
                this.currentPage = Math.max(0, maxPage);
            }
        }

        private attachEventListeners() {
            this.prevBtn?.addEventListener("click", () => this.goToPrevPage());
            this.nextBtn?.addEventListener("click", () => this.goToNextPage());
        }

        private goToPrevPage() {
            if (this.currentPage > 0) {
                this.currentPage--;
                this.updateView();
            }
        }

        private goToNextPage() {
            const totalPages = Math.ceil(
                this.totalProjects / this.itemsPerPage,
            );
            if (this.currentPage < totalPages - 1) {
                this.currentPage++;
                this.updateView();
            }
        }

        private updateView() {
            const startIndex = this.currentPage * this.itemsPerPage;
            const endIndex = startIndex + this.itemsPerPage;

            // Remover placeholders existentes
            document
                .querySelectorAll(".panel-projects__placeholder")
                .forEach((el) => el.remove());

            // Mostrar/ocultar proyectos según la página actual
            let visibleCount = 0;
            this.projectItems.forEach((item, index) => {
                if (index >= startIndex && index < endIndex) {
                    item.style.display = "";
                    visibleCount++;
                } else {
                    item.style.display = "none";
                }
            });

            // Agregar placeholders para completar el grid
            const grid = document.getElementById("projects-grid");
            if (grid && visibleCount < this.itemsPerPage) {
                const placeholdersNeeded = this.itemsPerPage - visibleCount;
                for (let i = 0; i < placeholdersNeeded; i++) {
                    const placeholder = document.createElement("div");
                    placeholder.className = "panel-projects__placeholder";
                    grid.appendChild(placeholder);
                }
            }

            // Actualizar estado de los botones
            this.updateButtons();
        }

        private updateButtons() {
            const totalPages = Math.ceil(
                this.totalProjects / this.itemsPerPage,
            );

            if (this.prevBtn) {
                this.prevBtn.disabled = this.currentPage === 0;
                this.prevBtn.classList.toggle(
                    "disabled",
                    this.currentPage === 0,
                );
            }

            if (this.nextBtn) {
                this.nextBtn.disabled = this.currentPage >= totalPages - 1;
                this.nextBtn.classList.toggle(
                    "disabled",
                    this.currentPage >= totalPages - 1,
                );
            }

            // Ocultar botones si solo hay una página
            if (this.container) {
                this.container.classList.toggle("single-page", totalPages <= 1);
            }
        }
    }

    // Inicializar cuando el DOM esté listo
    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", () => {
            new ProjectsPagination();
        });
    } else {
        new ProjectsPagination();
    }
</script>

<style>
    /* Panel principal */
    .panel-projects {
        display: flex;
        flex-direction: column;
        height: 100%;
        width: 100%;
    }

    /* Header */
    .panel-projects__header {
        flex: 0 0 auto;
        min-height: 0;
        margin-bottom: 16px;
    }

    .panel-projects__title {
        margin: 0 0 0 15px;
        font-size: 18px;
        font-weight: bold;
    }

    /* Paginación */
    .panel-projects__pagination {
        display: flex;
        align-items: stretch;
        gap: 12px;
        flex: 1;
        min-height: 0;
        transition: gap 0.3s ease;
    }

    .panel-projects__pagination.single-page .panel-projects__nav-btn {
        opacity: 0;
        pointer-events: none;
        width: 0;
        padding: 0;
        margin: 0;
    }

    /* Botones de navegación */
    .panel-projects__nav-btn {
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        color: rgba(255, 255, 255, 0.7);
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 8px;
        transition: all 0.2s ease;
        flex-shrink: 0;
        width: 44px;
    }

    .panel-projects__nav-btn:hover:not(:disabled) {
        background: rgba(255, 255, 255, 0.08);
        border-color: rgba(255, 255, 255, 0.2);
        color: rgba(255, 255, 255, 0.9);
        transform: scale(1.05);
    }

    .panel-projects__nav-btn:active:not(:disabled) {
        transform: scale(0.95);
    }

    .panel-projects__nav-btn:disabled,
    .panel-projects__nav-btn.disabled {
        opacity: 0.3;
        cursor: not-allowed;
        pointer-events: none;
    }

    .panel-projects__nav-btn svg {
        width: 20px;
        height: 20px;
        flex-shrink: 0;
    }

    /* Container del grid */
    .panel-projects__container {
        flex: 1 1 auto;
        min-height: 0;
        min-width: 0;
        width: 100%;
        position: relative;
        overflow: visible;
    }

    /* Grid de proyectos */
    .panel-projects__grid {
        position: absolute;
        inset: 0;
        display: grid;
        gap: 8px;
        grid-template-columns: repeat(4, 1fr);
        grid-template-rows: repeat(2, 1fr);
        align-content: stretch;
        align-items: stretch;
        overflow: hidden;
        padding: 2px;
    }

    /* Placeholder */
    .panel-projects__placeholder {
        background: transparent;
        border: 1px dashed rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        width: 100%;
        height: 100%;
    }

    /* Scrollbar */
    .panel-projects__grid::-webkit-scrollbar {
        width: 6px;
    }

    .panel-projects__grid::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.12);
        border-radius: 999px;
    }

    .panel-projects__grid::-webkit-scrollbar-thumb:hover {
        background: rgba(255, 255, 255, 0.18);
    }

    /* Breakpoints específicos para layouts */

    /* Desktop: 4 cols x 2 filas = 8 cards */
    @media (min-width: 1200px) {
        .panel-projects__grid {
            grid-template-columns: repeat(4, 1fr);
            grid-template-rows: repeat(2, 1fr);
        }
    }

    /* Tablet Large: 3 cols x 2 filas = 6 cards */
    @media (min-width: 900px) and (max-width: 1199px) {
        .panel-projects__grid {
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(2, 1fr);
        }

        .panel-projects__pagination {
            gap: 10px;
        }

        .panel-projects__nav-btn {
            width: 40px;
            padding: 6px;
        }
    }

    /* Tablet: 2 cols x 2 filas = 4 cards */
    @media (min-width: 640px) and (max-width: 899px) {
        .panel-projects__grid {
            grid-template-columns: repeat(2, 1fr);
            grid-template-rows: repeat(2, 1fr);
        }

        .panel-projects__title {
            font-size: 1.5rem;
        }

        .panel-projects__pagination {
            gap: 10px;
        }

        .panel-projects__nav-btn {
            width: 40px;
            padding: 6px;
        }
    }

    /* Mobile: 1 col x 4 filas = 4 cards */
    @media (max-width: 639px) {
        .panel-projects__grid {
            grid-template-columns: 1fr;
            grid-template-rows: repeat(4, 1fr);
        }

        .panel-projects__pagination {
            gap: 8px;
        }

        .panel-projects__nav-btn {
            width: 36px;
            padding: 4px;
        }

        .panel-projects__nav-btn svg {
            width: 18px;
            height: 18px;
        }
    }
</style>
