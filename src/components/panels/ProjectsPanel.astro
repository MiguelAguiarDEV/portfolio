---
import ProjectItem from "../ProjectItem.astro";
import type { Props as ProjectItemProps } from "../ProjectItem.astro";

export interface Props {
    title?: string;
    titleKey?: string;
    projects: ProjectItemProps[];
    projectsPerPage?: number;
}

const {
    title = "Repositorios de GitHub",
    titleKey,
    projects,
    projectsPerPage = 8,
} = Astro.props;

const totalPages = Math.ceil(projects.length / projectsPerPage);
const pages = Array.from({ length: totalPages }, (_, i) => {
    const start = i * projectsPerPage;
    return projects.slice(start, start + projectsPerPage);
});
---

<div class="projects-panel">
    <header class="panel-header">
        <h3 class="card-title" data-i18n-key={titleKey}>{title}</h3>
    </header>

    <div class="projects-container">
        {
            pages.map((pageProjects, pageIndex) => (
                <div
                    class={`projects-grid ${pageIndex === 0 ? "active" : ""}`}
                    data-page={pageIndex}
                >
                    {pageProjects.map((project) => (
                        <ProjectItem {...project} />
                    ))}
                </div>
            ))
        }
    </div>

    {
        totalPages > 1 && (
            <div class="pagination-controls">
                <button
                    class="pagination-btn prev"
                    aria-label="Página anterior"
                    data-i18n-attr-aria-label="pagination.prev"
                    disabled
                >
                    ‹
                </button>
                <div class="pagination-dots">
                    {pages.map((_, i) => (
                        <button
                            class={`pagination-dot ${i === 0 ? "active" : ""}`}
                            data-page-index={i}
                            aria-label={`Página ${i + 1}`}
                        />
                    ))}
                </div>
                <button
                    class="pagination-btn next"
                    aria-label="Página siguiente"
                    data-i18n-attr-aria-label="pagination.next"
                >
                    ›
                </button>
            </div>
        )
    }
</div>

<script>
    (function () {
        const container = document.currentScript?.closest(".projects-panel");
        if (!container) return;

        const grids = Array.from(container.querySelectorAll(".projects-grid"));
        const dots = Array.from(container.querySelectorAll(".pagination-dot"));
        const prevBtn = container.querySelector(".pagination-btn.prev");
        const nextBtn = container.querySelector(".pagination-btn.next");

        if (grids.length <= 1) return;

        let currentPage = 0;

        function updatePagination() {
            grids.forEach((grid, i) => {
                grid.classList.toggle("active", i === currentPage);
            });

            dots.forEach((dot, i) => {
                dot.classList.toggle("active", i === currentPage);
            });

            if (prevBtn) prevBtn.disabled = currentPage === 0;
            if (nextBtn) nextBtn.disabled = currentPage === grids.length - 1;
        }

        function goToPage(index: number) {
            currentPage = Math.max(0, Math.min(grids.length - 1, index));
            updatePagination();
        }

        prevBtn?.addEventListener("click", () => goToPage(currentPage - 1));
        nextBtn?.addEventListener("click", () => goToPage(currentPage + 1));

        dots.forEach((dot, i) => {
            dot.addEventListener("click", () => goToPage(i));
        });
    })();
</script>

<style>
    .projects-panel {
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 100%;
        max-height: 100%;
        min-height: 0;
        margin: 0;
        padding: 0;
        overflow: visible;
    }

    .panel-header {
        flex: 0 0 auto;
        min-height: 0;
    }

    .projects-container {
        flex: 1 1 auto;
        min-height: 0;
        position: relative;
        overflow: visible;
    }

    .projects-grid {
        position: absolute;
        inset: 0;
        display: grid;
        gap: 8px;
        grid-template-columns: repeat(auto-fit, minmax(min(280px, 100%), 1fr));
        grid-auto-rows: minmax(0, 1fr);
        align-content: start;
        overflow-y: auto;
        overflow-x: visible;
        padding: 2px;
        opacity: 0;
        visibility: hidden;
        transition:
            opacity 0.3s ease,
            visibility 0.3s ease;
    }

    .projects-grid.active {
        opacity: 1;
        visibility: visible;
    }

    .projects-grid::-webkit-scrollbar {
        width: 6px;
    }

    .projects-grid::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.12);
        border-radius: 999px;
    }

    .pagination-controls {
        flex: 0 0 auto;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 16px;
        padding: 12px 0;
    }

    .pagination-btn {
        width: 36px;
        height: 36px;
        display: grid;
        place-items: center;
        border: 1px solid var(--ring);
        border-radius: 8px;
        background: rgba(255, 255, 255, 0.05);
        color: var(--ink);
        font-size: 1.5rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .pagination-btn:hover:not(:disabled) {
        background: rgba(255, 255, 255, 0.1);
        transform: scale(1.05);
    }

    .pagination-btn:disabled {
        opacity: 0.3;
        cursor: not-allowed;
    }

    .pagination-dots {
        display: flex;
        gap: 8px;
        align-items: center;
    }

    .pagination-dot {
        width: 10px;
        height: 10px;
        border-radius: 999px;
        border: none;
        background: rgba(255, 255, 255, 0.25);
        cursor: pointer;
        transition: all 0.2s ease;
        padding: 0;
    }

    .pagination-dot:hover {
        background: rgba(255, 255, 255, 0.5);
        transform: scale(1.2);
    }

    .pagination-dot.active {
        background: var(--accent);
        width: 24px;
    }

    @media (max-width: 900px) {
        .panel-header h3 {
            font-size: 1.5rem;
        }
    }
</style>
