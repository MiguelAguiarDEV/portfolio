---
interface Props {
    sticky?: boolean;
}
const { sticky = true } = Astro.props;
---

<header
    class={`w-full top-0 left-0 z-100 ${sticky ? "fixed" : "absolute"} flex justify-center pointer-events-none`}
>
    <nav id="nav-dynamic" class="pointer-events-auto"></nav>
</header>

<script>
    // @ts-nocheck
    const nav = document.getElementById("nav-dynamic");
    const getName = (id) =>
        id
            .replace(/^section-/, "")
            .replace(/-/g, " ")
            .replace(/\b\w/g, (c) => c.toUpperCase());

    function buildButtons() {
        nav.innerHTML = "";
        document.querySelectorAll('[id^="section-"]').forEach((sec) => {
            const btn = document.createElement("button");
            btn.textContent = getName(sec.id);
            btn.onclick = () => window.setActiveSection?.(getName(sec.id));
            nav.appendChild(btn);
        });
        highlightActive();
    }

    function highlightActive() {
        const active = document.querySelector('[id^="section-"].active');
        [...nav.children].forEach((b) => {
            b.classList.toggle(
                "active",
                active && getName(active.id) === b.textContent,
            );
        });
    }

    buildButtons();
    new MutationObserver(buildButtons).observe(
        document.getElementById("app-main") || document.body,
        { childList: true, subtree: true },
    );
    setInterval(highlightActive, 200);
</script>
