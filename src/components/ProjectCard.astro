---
export interface MediaItem {
    kind: "image" | "video";
    src: string;
    alt?: string;
    poster?: string; // solo video
}
interface Props {
    title: string;
    description?: string;
    tags?: string[];
    media: MediaItem[]; // al menos 1
    liveUrl?: string;
    repoUrl?: string;
    ratio?: string; // CSS aspect-ratio, ej: "16 / 9"
}
const {
    title,
    description = "",
    tags = [],
    media = [],
    liveUrl,
    repoUrl,
    ratio = "16 / 9",
} = Astro.props;
const hasMedia = media.length > 0;
---

<article class="proj-card" data-proj>
    {
        hasMedia && (
            <div class="proj-media" style={{ aspectRatio: ratio }}>
                <div class="slider" data-slider>
                    <div class="slides" data-slides>
                        {media.map((m, i) => (
                            <figure
                                class={`slide${i === 0 ? " is-active" : ""}`}
                            >
                                {m.kind === "image" ? (
                                    <img
                                        loading="lazy"
                                        src={m.src}
                                        alt={m.alt ?? title}
                                    />
                                ) : (
                                    <video
                                        preload="none"
                                        controls
                                        playsinline
                                        muted
                                        poster={m.poster}
                                    >
                                        <source src={m.src} type="video/mp4" />
                                        Tu navegador no soporta video.
                                    </video>
                                )}
                            </figure>
                        ))}
                    </div>
                    {media.length > 1 && (
                        <>
                            <button
                                class="nav prev"
                                aria-label="Anterior"
                                data-prev
                            >
                                ‹
                            </button>
                            <button
                                class="nav next"
                                aria-label="Siguiente"
                                data-next
                            >
                                ›
                            </button>
                            <div class="dots" data-dots />
                        </>
                    )}
                </div>
            </div>
        )
    }

    <div class="proj-meta">
        <h4 class="proj-title">{title}</h4>
        {description && <p class="proj-desc">{description}</p>}

        {
            tags.length > 0 && (
                <div class="proj-tags">
                    {tags.map((t) => (
                        <span class="chip">{t}</span>
                    ))}
                </div>
            )
        }

        {
            (liveUrl || repoUrl) && (
                <div class="proj-actions">
                    {liveUrl && (
                        <a
                            class="btn-primary btn-compact"
                            href={liveUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                        >
                            Live
                        </a>
                    )}
                    {repoUrl && (
                        <a
                            class="btn-secondary btn-compact"
                            href={repoUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                        >
                            Repo
                        </a>
                    )}
                </div>
            )
        }
    </div>
</article>

<style>
    .proj-card {
        display: flex;
        flex-direction: column;
        gap: 0.8rem;
        padding: 1rem;
        border-radius: 0.9rem;
        background: color-mix(in oklab, white 8%, transparent);
        border: 1px solid color-mix(in oklab, white 70%, transparent);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        backdrop-filter: saturate(140%) blur(10px);
    }
    .proj-media {
        position: relative;
        border-radius: 0.75rem;
        overflow: hidden;
        background: #0c0c0c;
    }
    .proj-media .slider {
        position: relative;
        width: 100%;
        height: 100%;
    }
    .proj-media .slides {
        --idx: 0;
        display: flex;
        width: 100%;
        height: 100%;
        transform: translateX(calc(var(--idx) * -100%));
        transition: transform 0.28s ease;
    }
    .proj-media .slide {
        flex: 0 0 100%;
        width: 100%;
    }
    .proj-media img,
    .proj-media video {
        display: block;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .nav {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 2rem;
        height: 2rem;
        border-radius: 9999px;
        border: 1px solid color-mix(in oklab, white 30%, transparent);
        background: color-mix(in oklab, black 10%, transparent);
        backdrop-filter: blur(8px) saturate(140%);
        display: grid;
        place-items: center;
        cursor: pointer;
        user-select: none;
    }
    .nav:hover {
        filter: brightness(1.1);
    }
    .nav.prev {
        left: 0.5rem;
    }
    .nav.next {
        right: 0.5rem;
    }

    .dots {
        position: absolute;
        left: 50%;
        bottom: 0.5rem;
        transform: translateX(-50%);
        display: flex;
        gap: 0.35rem;
    }
    .dots .dot {
        width: 0.5rem;
        height: 0.5rem;
        border-radius: 9999px;
        border: 1px solid color-mix(in oklab, white 40%, transparent);
        background: color-mix(in oklab, white 10%, transparent);
    }
    .dots .dot.is-active {
        background: color-mix(in oklab, white 60%, transparent);
    }

    .proj-title {
        margin: 0;
        font-weight: 700;
    }
    .proj-desc {
        margin: 0.1rem 0 0 0;
        font-size: 0.9rem;
        opacity: 0.9;
    }
    .proj-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.4rem;
    }
    .proj-actions {
        display: flex;
        gap: 0.5rem;
        margin-top: 0.4rem;
    }
</style>

<script is:inline>
    const root = document.currentScript?.closest("[data-proj]");
    if (root) {
        const slider = root.querySelector("[data-slider]");
        const slidesEl = slider?.querySelector("[data-slides]");
        if (slidesEl) {
            const slideEls = Array.from(slidesEl.children);
            const prevBtn = slider.querySelector("[data-prev]");
            const nextBtn = slider.querySelector("[data-next]");
            const dotsEl = slider.querySelector("[data-dots]");

            let idx = 0;
            const n = slideEls.length;
            slidesEl.style.setProperty("--idx", String(idx));

            const dots = [];
            if (dotsEl) {
                for (let i = 0; i < n; i++) {
                    const b = document.createElement("button");
                    b.className = "dot" + (i === 0 ? " is-active" : "");
                    b.type = "button";
                    b.setAttribute("aria-label", `Ir al slide ${i + 1}`);
                    b.addEventListener("click", () => go(i));
                    dotsEl.appendChild(b);
                    dots.push(b);
                }
            }

            function go(next) {
                idx = (next + n) % n;
                slidesEl.style.setProperty("--idx", String(idx));
                dots.forEach((d, i) =>
                    d.classList.toggle("is-active", i === idx),
                );
                slideEls.forEach((s, i) => {
                    const v = s.querySelector("video");
                    if (v) i === idx ? null : v.pause();
                });
            }

            prevBtn?.addEventListener("click", () => go(idx - 1));
            nextBtn?.addEventListener("click", () => go(idx + 1));

            let startX = null;
            slider?.addEventListener("pointerdown", (e) => {
                startX = e.clientX;
            });
            slider?.addEventListener(
                "pointerup",
                (e) => {
                    if (startX == null) return;
                    const dx = e.clientX - startX;
                    if (Math.abs(dx) > 40) go(idx + (dx < 0 ? 1 : -1));
                    startX = null;
                },
                { passive: true },
            );
        }
    }
</script>
