---
interface Props {
    bgColor?: string;
    showMenu?: boolean;
    showXDisplacement?: boolean;
    showWipeAngle?: boolean;
    showStaticXOffset?: boolean;
    defaultX?: number;
    defaultWipe?: number;
    defaultStatic?: number;
    sectionName?: string;
    zIndex?: number; // z base (queda en --z)
    itsFirst?: boolean; // si es la primera, empieza “abierta”
}

const {
    bgColor = "bg-gray-500",
    showMenu = false,
    showXDisplacement = true,
    showWipeAngle = true,
    showStaticXOffset = true,
    defaultX = 0,
    defaultWipe = 40,
    defaultStatic = -41,
    sectionName,
    zIndex = 10,
    itsFirst = false,
} = Astro.props;

const uniqueId = `section-${Math.random().toString(36).slice(2, 9)}`;
const stableId = sectionName
    ? `section-${sectionName
          .toString()
          .trim()
          .toLowerCase()
          .replace(/[^a-z0-9\s-_]/g, "")
          .replace(/\s+/g, "-")}`
    : uniqueId;
---

<div
    id={stableId}
    class:list={[
        "section h-full w-full absolute inset-0",
        bgColor,
        itsFirst ? "wiped" : "",
    ]}
    style={`--x-displacement:${defaultX}%; --wipe-angle:${defaultWipe}%; --static-x-offset:${defaultStatic}%; --z:${zIndex};`}
>
    <section class="grid place-items-center h-full text-5xl font-extrabold">
        <slot />
    </section>
</div>

<style>
    /* Posicionamiento y capa base mediante variable */
    .section {
        position: absolute;
        inset: 0;
        z-index: var(--z, 0);
        contain: paint;
        will-change: clip-path;
    }

    /* Variables por defecto y geometría */
    [id^="section-"] {
        --x-displacement: 0%;
        --static-x-offset: -41%;
        --wipe-angle: 40%;

        --x1-position: var(--static-x-offset);
        --y1-position: 0%;

        --x2-position: var(--static-x-offset);
        --y2-position: 100%;

        --wipe-angle-modified: calc(var(--wipe-angle) - var(--static-x-offset));

        --x3-position: calc(
            var(--wipe-angle) + var(--x2-position) + var(--x-displacement)
        );
        --y3-position: var(--y2-position);

        --x4-position: calc(var(--x1-position) + var(--x-displacement));
        --y4-position: var(--y1-position);

        --wipe-duration: 4s;
        --wipe-ease: linear;
    }

    /* Estado visible según polígono actual */
    [id^="section-"] {
        clip-path: polygon(
            var(--x1-position) var(--y1-position),
            var(--x2-position) var(--y2-position),
            var(--x3-position) var(--y3-position),
            var(--x4-position) var(--y4-position)
        );
    }

    /* Ejecuta animación sin forwards */
    .play-wipe {
        animation: wipeAnimation var(--wipe-duration) var(--wipe-ease);
    }

    /* La activa sube por encima de cualquier --z */
    .on-top {
        z-index: 50;
    }

    /* Consolidado tras animationend */
    .section.wiped {
        clip-path: polygon(0 0, 0 100%, 100% 100%, 100% 0);
        animation: none !important;
    }

    @keyframes wipeAnimation {
        0% {
        }
        100% {
            clip-path: polygon(
                var(--x1-position) var(--y1-position),
                var(--x2-position) var(--y2-position),
                calc(var(--wipe-angle) + var(--x2-position) + 101%)
                    var(--y3-position),
                calc(var(--x1-position) + 141%) var(--y4-position)
            );
        }
    }

    @media (prefers-reduced-motion: reduce) {
        .play-wipe {
            animation: none;
        }
    }
</style>
